{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useRouter } from \"next/router\";\nimport Cookies from 'js-cookie'; // redux\n\nconst withAuth = (WrappedComponent, type) => {\n  return props => {\n    const Router = useRouter();\n    const isLogin = Cookies.get('laxmi-auth');\n    const PersistString = localStorage.getItem(\"persist:laxmi\");\n    const parseObject1 = JSON.parse(PersistString, function (key, value) {\n      if (key == \"birth\") {\n        return new Date(value);\n      } else {\n        return value;\n      }\n    });\n    const auth = JSON.parse((parseObject1 === null || parseObject1 === void 0 ? void 0 : parseObject1.auth) || null, function (key, value) {\n      if (key == \"birth\") {\n        return new Date(value);\n      } else {\n        return value;\n      }\n    });\n\n    if (type === 'auth') {\n      if (auth !== null && auth !== void 0 && auth.isLogin || false) {\n        Router.replace(\"/\");\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(WrappedComponent, _objectSpread({}, props));\n    } else {\n      if (!auth.isLogin) {\n        Router.replace(\"/login\");\n        return null;\n      }\n\n      return /*#__PURE__*/_jsx(WrappedComponent, _objectSpread({}, props));\n    }\n  };\n};\n\nexport default withAuth;","map":null,"metadata":{},"sourceType":"module"}