{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport useTranslation from 'next-translate/useTranslation'; // redux\n\nimport { forgotAction2, forgotAction3 } from '../../../stores'; // elements\n\nimport { Input } from '../../../components/elements/form';\nimport swal from 'sweetalert'; // helpers\n\nimport ValidatePassword from '../../../helpers/validationPassword';\n\nconst FormForgotPassword = () => {\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    0: form,\n    1: setForm\n  } = useState({});\n  const {\n    0: error,\n    1: setError\n  } = useState({});\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    t\n  } = useTranslation(\"login\");\n  useEffect(() => {\n    setError({});\n    const formValue = {\n      \"token\": id\n    };\n    forgotAction2(formValue).then(response => {\n      if (!response.status) {\n        router.push('/');\n      }\n    });\n  }, []);\n\n  const validateForm = () => {\n    let valid = true;\n\n    var newErrors = _objectSpread({}, error); // password\n\n\n    if (!form.password) {\n      newErrors.password = `Password ${t(\"common:cannot be empty\")}`;\n      valid = false;\n    } else if (!ValidatePassword(form.password)) {\n      newErrors.password = `Password ${t(\"common:is not valid\")}`;\n      valid = false;\n    } else {\n      newErrors.password = null;\n    } // confirm password\n\n\n    if (!form.passwordConfirm) {\n      newErrors.passwordConfirm = `Confirm Password ${t(\"common:cannot be empty\")}`;\n      valid = false;\n    } else if (!ValidatePassword(form.passwordConfirm)) {\n      newErrors.passwordConfirm = `Confirm Password ${t(\"common:is not valid\")}`;\n      valid = false;\n    } else if (form.password !== form.passwordConfirm) {\n      newErrors.passwordConfirm = `Confirm Password ${t(\"common:doesn't match with\")} Password`;\n      valid = false;\n    } else {\n      newErrors.passwordConfirm = null;\n    }\n\n    setError(newErrors);\n    return valid;\n  }; //handle \n\n\n  const handleChange = e => {\n    const {\n      value,\n      id\n    } = e.target;\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [id]: value\n    }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      setIsLoading(true);\n      swal({\n        title: `${t(\"Confirm Change Password\")}`,\n        text: `${t(\"Are you sure you want to change password\")} ?`,\n        icon: \"warning\",\n        buttons: true,\n        dangerMode: true\n      }).then(willDelete => {\n        if (willDelete) {\n          const formValues = {\n            \"password\": form.password,\n            \"token\": id\n          };\n          forgotAction3(formValues).then(res => {\n            console.log(res);\n            const {\n              status\n            } = res;\n\n            if (status) {\n              swal(`${t(\"Password Changed Successfully\")}`, `${t(\"Please log in again\")}`, \"success\").then(v => {\n                router.push('/login');\n              });\n              setError({});\n              setIsLoading(false);\n            } else {\n              setError({\n                password: response.message\n              });\n              setIsLoading(false);\n            }\n          }).catch(_ => {\n            setError({\n              password: `${t(\"common:Something Wrong\")}`\n            });\n          });\n        } else {\n          setIsLoading(false);\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsx(Input, {\n      id: \"password\",\n      type: \"password\",\n      error: error.password,\n      label: t(\"New Password\"),\n      onChange: handleChange\n    }), /*#__PURE__*/_jsx(Input, {\n      id: \"passwordConfirm\",\n      type: \"password\",\n      error: error.passwordConfirm,\n      label: t(\"Confirm Password\"),\n      onChange: handleChange\n    }), /*#__PURE__*/_jsx(\"button\", {\n      disabled: isLoading,\n      type: \"submit\",\n      className: \"btn btn-primary py-3 w-100\",\n      children: isLoading ? 'Loading' : t(\"Change\")\n    })]\n  });\n};\n\nexport default FormForgotPassword;","map":null,"metadata":{},"sourceType":"module"}