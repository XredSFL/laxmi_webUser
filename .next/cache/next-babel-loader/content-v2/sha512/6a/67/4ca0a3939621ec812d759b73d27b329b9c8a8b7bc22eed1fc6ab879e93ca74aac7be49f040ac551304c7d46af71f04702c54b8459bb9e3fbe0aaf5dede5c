{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_REQUEST, FETCH_SUCCESS, FETCH_FAILURE } from './types'; // import axios from '../../helpers/axiosConfig'\n\nexport var fetcAction = function fetcAction(url, params) {\n  var urlParamsFilter = '';\n  Object.keys(params).map(function (key, index) {\n    if (params[key]) {\n      urlParamsFilter += \"&\".concat([key], \"=\").concat(params[key]);\n    }\n  });\n  console.log(\"\".concat(url, \"?\").concat(urlParamsFilter));\n  console.log(\"\".concat(params.category));\n  return function (dispatch) {\n    dispatch(fetchActionRequest());\n    axios.get(\"/api\".concat(url, \"?\").concat(urlParamsFilter)).then(function (response) {\n      var _response$data = response.data,\n          status = _response$data.status,\n          message = _response$data.message,\n          data = _response$data.data;\n\n      if (status) {\n        dispatch(fetchActionSuccess(response.data));\n      } else {\n        dispatch(fetchActionFailure(message));\n      }\n    })[\"catch\"](function (error) {\n      dispatch(fetchActionFailure(error.message));\n    });\n  };\n};\nexport var fetchActionRequest = function fetchActionRequest() {\n  return {\n    type: FETCH_REQUEST\n  };\n};\nexport var fetchActionSuccess = function fetchActionSuccess(data) {\n  return {\n    type: FETCH_SUCCESS,\n    payload: data\n  };\n};\nexport var fetchActionFailure = function fetchActionFailure(error) {\n  return {\n    type: FETCH_FAILURE,\n    payload: error\n  };\n};","map":{"version":3,"sources":["D:/luarKampus/Magang/Bestada/laxmi.front.web.user/stores/fetchList/actions.js"],"names":["axios","FETCH_REQUEST","FETCH_SUCCESS","FETCH_FAILURE","fetcAction","url","params","urlParamsFilter","Object","keys","map","key","index","console","log","category","dispatch","fetchActionRequest","get","then","response","data","status","message","fetchActionSuccess","fetchActionFailure","error","type","payload"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,aADF,EAEEC,aAFF,EAGEC,aAHF,QAIO,SAJP,C,CAMA;;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,MAAN,EAAiB;AACzC,MAAIC,eAAe,GAAG,EAAtB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,GAApB,CAAwB,UAAUC,GAAV,EAAeC,KAAf,EAAsB;AAC5C,QAAIN,MAAM,CAACK,GAAD,CAAV,EAAiB;AACfJ,MAAAA,eAAe,eAAQ,CAACI,GAAD,CAAR,cAAiBL,MAAM,CAACK,GAAD,CAAvB,CAAf;AACD;AACF,GAJD;AAKAE,EAAAA,OAAO,CAACC,GAAR,WAAeT,GAAf,cAAsBE,eAAtB;AACAM,EAAAA,OAAO,CAACC,GAAR,WAAeR,MAAM,CAACS,QAAtB;AACA,SAAO,UAACC,QAAD,EAAc;AACnBA,IAAAA,QAAQ,CAACC,kBAAkB,EAAnB,CAAR;AACAjB,IAAAA,KAAK,CACFkB,GADH,eACcb,GADd,cACqBE,eADrB,GAEGY,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAAA,2BACkBA,QAAQ,CAACC,IAD3B;AAAA,UACRC,MADQ,kBACRA,MADQ;AAAA,UACAC,OADA,kBACAA,OADA;AAAA,UACSF,IADT,kBACSA,IADT;;AAEhB,UAAIC,MAAJ,EAAY;AACVN,QAAAA,QAAQ,CAACQ,kBAAkB,CAACJ,QAAQ,CAACC,IAAV,CAAnB,CAAR;AACD,OAFD,MAEO;AACLL,QAAAA,QAAQ,CAACS,kBAAkB,CAACF,OAAD,CAAnB,CAAR;AACD;AACF,KATH,WAUS,UAAAG,KAAK,EAAI;AACdV,MAAAA,QAAQ,CAACS,kBAAkB,CAACC,KAAK,CAACH,OAAP,CAAnB,CAAR;AACD,KAZH;AAaD,GAfD;AAgBD,CA1BM;AA4BP,OAAO,IAAMN,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AACtC,SAAO;AACLU,IAAAA,IAAI,EAAE1B;AADD,GAAP;AAGD,CAJM;AAKP,OAAO,IAAMuB,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAH,IAAI,EAAI;AACxC,SAAO;AACLM,IAAAA,IAAI,EAAEzB,aADD;AAEL0B,IAAAA,OAAO,EAAEP;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,KAAK,EAAI;AACzC,SAAO;AACLC,IAAAA,IAAI,EAAExB,aADD;AAELyB,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM","sourcesContent":["\r\nimport axios from 'axios';\r\nimport {\r\n  FETCH_REQUEST,\r\n  FETCH_SUCCESS,\r\n  FETCH_FAILURE,\r\n} from './types';\r\n\r\n// import axios from '../../helpers/axiosConfig'\r\n\r\nexport const fetcAction = (url, params) => {\r\n  let urlParamsFilter = ''\r\n\r\n  Object.keys(params).map(function (key, index) {\r\n    if (params[key]) {\r\n      urlParamsFilter += `&${[key]}=${params[key]}`\r\n    }\r\n  })\r\n  console.log(`${url}?${urlParamsFilter}`);\r\n  console.log(`${params.category}`);\r\n  return (dispatch) => {\r\n    dispatch(fetchActionRequest())\r\n    axios\r\n      .get(`/api${url}?${urlParamsFilter}`)\r\n      .then(response => {\r\n        const { status, message, data } = response.data\r\n        if (status) {\r\n          dispatch(fetchActionSuccess(response.data))\r\n        } else {\r\n          dispatch(fetchActionFailure(message))\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchActionFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchActionRequest = () => {\r\n  return {\r\n    type: FETCH_REQUEST\r\n  }\r\n}\r\nexport const fetchActionSuccess = data => {\r\n  return {\r\n    type: FETCH_SUCCESS,\r\n    payload: data\r\n  }\r\n}\r\n\r\nexport const fetchActionFailure = error => {\r\n  return {\r\n    type: FETCH_FAILURE,\r\n    payload: error\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}