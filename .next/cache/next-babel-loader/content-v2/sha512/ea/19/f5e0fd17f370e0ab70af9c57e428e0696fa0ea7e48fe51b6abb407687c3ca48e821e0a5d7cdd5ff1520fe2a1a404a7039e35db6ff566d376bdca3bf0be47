{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useState, useEffect } from 'react';\nimport useTranslation from 'next-translate/useTranslation';\nimport { useRouter } from 'next/router'; // REDUX\n\nimport { connect } from 'react-redux';\nimport { fetcAction } from '../../../stores'; // helper\n// import Axios from '../../../helpers/axiosConfig'\n// elements\n\nimport BreadCrumb from '../../../components/elements/breadcrumb'; // partials\n\nimport ProductDetailDescription from '../../../components/partials/product/modules/productDetailDescription';\nimport ImageGallery from '../../../components/partials/product/modules/imageGallery'; // elements\n\nimport Product from '../../../components/elements/product/productHome';\nimport Heading from '../../../components/elements/heading'; // shared\n\nimport Testimonies from '../../../components/partials/home/testimonies';\nimport axios from 'axios';\n\nconst ProductsDetail = ({\n  fetcAction,\n  fetchResult\n}) => {\n  const {\n    t\n  } = useTranslation(\"product\");\n  const router = useRouter();\n  const {\n    category,\n    id\n  } = router.query;\n  const {\n    0: data,\n    1: setData\n  } = useState(null);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: params,\n    1: setParams\n  } = useState({\n    page: 1,\n    per_page: 3,\n    sort_by: 'hightolower'\n  });\n  useEffect(() => {\n    fetcAction('/products', params);\n  }, [category]);\n  useEffect(() => {\n    axios.get(`/api/products/details/${id}`).then(response => {\n      const {\n        data,\n        status,\n        message\n      } = response.data;\n\n      if (status) {\n        setData(data);\n      } else {\n        setError(message);\n      }\n    }).catch(error => {\n      setError(error.message);\n    });\n  }, [id]);\n  const pathBreadCumb = [{\n    'path': `/productportal/${category}`,\n    'name': `${t(\"Products\")}`\n  }, {\n    'path': `/products/${category}`,\n    'name': t(category)\n  }, {\n    'path': `/products/${category}/${id}`,\n    'name': `${data && data.title}`\n  }];\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [data ? /*#__PURE__*/_jsxs(_Fragment, {\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"product-detail\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"container-fluid px-5\",\n          children: /*#__PURE__*/_jsx(BreadCrumb, {\n            path: pathBreadCumb\n          })\n        }), /*#__PURE__*/_jsxs(\"section\", {\n          className: \"row px-5 mx-0\",\n          children: [/*#__PURE__*/_jsx(ImageGallery, {\n            id: id,\n            t: t,\n            data: data.images\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-12 col-md-7 desc\",\n            children: /*#__PURE__*/_jsx(ProductDetailDescription, {\n              category: category,\n              t: t,\n              data: data\n            })\n          })]\n        })]\n      }), /*#__PURE__*/_jsx(Heading, {\n        title: t(\"Related Products\")\n      }), /*#__PURE__*/_jsx(\"div\", {\n        className: \"row mx-0 px-0\",\n        children: fetchResult.data ? fetchResult.data.data.length ? /*#__PURE__*/_jsx(_Fragment, {\n          children: fetchResult.data.data.map((data, index) => /*#__PURE__*/_jsx(Product, {\n            t: t,\n            data: data,\n            index: index\n          }, index))\n        }) : /*#__PURE__*/_jsx(\"p\", {\n          className: \"text-center\",\n          children: t('common:There are no data yet')\n        }) : fetchResult.error ? /*#__PURE__*/_jsx(\"p\", {\n          className: \"text-center\",\n          children: fetchResult.error\n        }) : /*#__PURE__*/_jsx(\"div\", {\n          className: \"loader\"\n        })\n      })]\n    }) : error ? /*#__PURE__*/_jsx(\"p\", {\n      className: \"text-center\",\n      children: error\n    }) : /*#__PURE__*/_jsx(\"div\", {\n      className: \"loader mt-5\"\n    }), /*#__PURE__*/_jsx(Testimonies, {\n      t: t\n    })]\n  });\n};\n\nconst mapStateToProps = state => {\n  return {\n    fetchResult: state.fetchList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetcAction: (url, params) => dispatch(fetcAction(url, params))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductsDetail);","map":null,"metadata":{},"sourceType":"module"}