{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Link from 'next/link';\nimport { withRouter, useRouter } from 'next/router';\nimport React, { useState, useEffect } from 'react';\nimport { AccountCircle } from '../../../elements/icon'; // data\n\nimport linkArray from '../../data/linkArray'; // redux\n\nimport { connect } from 'react-redux';\nimport { logout, loginAction, enterPage } from '../../../../stores'; // elements\n\nimport { Input } from '../../../elements/form';\n\nconst Account = ({\n  router,\n  setIsShowAccount,\n  isShowAccount,\n  form,\n  error,\n  setForm,\n  setError,\n  t,\n  authData,\n  loginAction,\n  logout,\n  enterPage\n}) => {\n  const pathName = router.pathname;\n  const UseRouter = useRouter();\n  useEffect(() => {\n    enterPage();\n    setError({});\n  }, [isShowAccount]);\n  useEffect(() => {\n    setError({\n      email: authData.error\n    });\n  }, [authData.error]);\n\n  const validateForm = () => {\n    let valid = true;\n\n    var newErrors = _objectSpread({}, error);\n\n    if (!form.email) {\n      newErrors.email = `Email ${t(\"common:cannot be empty\")}`;\n      valid = false;\n    } else if (!form.email.includes(\"@\")) {\n      newErrors.email = `Email ${t(\"common:is not valid\")}`;\n      valid = false;\n    } else {\n      newErrors.email = null;\n    }\n\n    if (!form.password) {\n      newErrors.password = `Password ${t(\"common:cannot be empty\")}`;\n      valid = false;\n    } else {\n      newErrors.password = null;\n    }\n\n    setError(newErrors);\n    return valid;\n  }; // handle\n\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (validateForm()) {\n      loginAction(form, router); // setIsShowAccount(!isShowAccount)\n    } // if (form.email) {\n    //     if (form.password) {\n    //         loginAction(form, UseRouter)\n    //         // setError({})\n    //     } else {\n    //         setError({\n    //             password: `${t(\"common:Password\")} ${t(\"common:cannot be empty\")}`\n    //         })\n    //     }\n    // } else {\n    //     setError({\n    //         email: `Email ${t(\"common:cannot be empty\")}`\n    //     })\n    // }\n\n  };\n\n  const handleChange = e => {\n    const {\n      value,\n      id\n    } = e.target;\n    setForm(_objectSpread(_objectSpread({}, form), {}, {\n      [id]: value\n    }));\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"mx-2\",\n    children: [/*#__PURE__*/_jsx(\"a\", {\n      type: \"button\",\n      id: \"dropdownMenuButton\",\n      \"aria-expanded\": \"false\",\n      onClick: () => setIsShowAccount(!isShowAccount),\n      children: /*#__PURE__*/_jsx(AccountCircle, {})\n    }), /*#__PURE__*/_jsx(\"ul\", {\n      className: `dropdown-menu dropdown-container dropdown-account py-4 ${isShowAccount ? 'show' : ''}`,\n      children: authData.isLogin ? /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"text-center\",\n          children: [/*#__PURE__*/_jsxs(\"h5\", {\n            children: [t(\"hi\"), \", \", authData.data.name]\n          }), /*#__PURE__*/_jsxs(\"p\", {\n            children: [t(\"Access to your personal area\"), \" : \"]\n          })]\n        }), linkArray.map((dataLink, index) => /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(Link, {\n            href: dataLink.url,\n            children: /*#__PURE__*/_jsxs(\"a\", {\n              className: `d-flex justify-content-between dropdown-item ${dataLink.url === pathName ? 'active' : ''}`,\n              children: [t(dataLink.title), index === 1 ? /*#__PURE__*/_jsx(\"span\", {\n                className: \"notif pt-1\",\n                children: \"1\"\n              }) : null]\n            })\n          })\n        }, index)), /*#__PURE__*/_jsx(\"li\", {\n          children: /*#__PURE__*/_jsx(\"a\", {\n            className: \"dropdown-item\",\n            onClick: () => {\n              logout();\n              setIsShowAccount(!isShowAccount);\n              setTimeout(function () {\n                window.location.reload();\n              }, 500);\n            },\n            children: t(\"Log Out\")\n          })\n        })]\n      }) : /*#__PURE__*/_jsxs(_Fragment, {\n        children: [/*#__PURE__*/_jsx(\"h5\", {\n          className: \"text-center\",\n          children: t(\"common:Access your account\")\n        }), /*#__PURE__*/_jsxs(\"form\", {\n          className: \"px-5 pt-3\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsx(Input, {\n            id: \"email\",\n            type: \"text\",\n            error: error.email,\n            label: t(\"common:Email\"),\n            onChange: handleChange\n          }), /*#__PURE__*/_jsx(Input, {\n            id: \"password\",\n            type: \"password\",\n            error: error.password,\n            label: t(\"common:Password\"),\n            onChange: handleChange\n          }), /*#__PURE__*/_jsx(\"button\", {\n            disabled: authData.isLoading,\n            type: \"submit\",\n            className: \"btn btn-primary w-100 py-3\",\n            children: authData.isLoading ? 'Loading' : t(\"common:Login\")\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"text-center pt-3\",\n          onClick: () => setIsShowAccount(!isShowAccount),\n          children: [/*#__PURE__*/_jsx(Link, {\n            href: \"/login/forgotpassword\",\n            children: /*#__PURE__*/_jsxs(\"p\", {\n              className: \"link mb-0\",\n              children: [t(\"common:Forgot Password\"), \" ?\"]\n            })\n          }), /*#__PURE__*/_jsx(Link, {\n            href: \"/login/register\",\n            children: /*#__PURE__*/_jsx(\"p\", {\n              className: \"link mb-0\",\n              children: t(\"common:Create Account\")\n            })\n          })]\n        })]\n      })\n    })]\n  });\n};\n\nconst mapStateToProps = state => {\n  return {\n    authData: state.auth\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(logout()),\n    loginAction: (form, router) => dispatch(loginAction(form, router)),\n    enterPage: () => dispatch(enterPage())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Account));","map":null,"metadata":{},"sourceType":"module"}